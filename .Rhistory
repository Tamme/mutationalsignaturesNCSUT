d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(summary(fit)$r.square)
}
results <- boot(data=data100, statistic=rsq,
?boot.ci
?boot.ci
return
?boot.ci
boot.ci(data100, type="all")
boot.ci(data100, type="all")
boot(data100, fun, R = 999)
boot(data100, fun, R = 999, n=100)
fun <- function(vals, n){
print(vals)
ui_lambda_upper = exp(log(vals)) + 1.96*sqrt(2/(n-1))    #95%
ui_lambda_lower = exp(log(vals)) - 1.96*sqrt(2/(n-1))    #95%
}
boot(data100, fun, R = 999)
fun <- function(vals, n){
print(dim(vals))
cov_data100 = cov(vals)
cov_data100
eigenvalues = eigen(cov_data100)$values
ui_lambda_upper = exp(log(eigenvalues)) + 1.96*sqrt(2/(n-1))    #95%
ui_lambda_lower = exp(log(eigenvalues)) - 1.96*sqrt(2/(n-1))    #95%
}
boot(data100, fun, R = 999)
fun <- function(vals){
#print(dim(vals))
cov_data100 = cov(vals)
#cov_data100
eigenvalues = eigen(cov_data100)$values
ui_lambda_upper = exp(log(eigenvalues)) + 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
ui_lambda_lower = exp(log(eigenvalues)) - 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
}
boot(data100, fun, R = 2)
boot(data100, fun, R = 2)
fun <- function(vals, n){
#print(dim(vals))
cov_data100 = cov(vals)
#cov_data100
eigenvalues = eigen(cov_data100)$values
ui_lambda_upper = exp(log(eigenvalues)) + 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
ui_lambda_lower = exp(log(eigenvalues)) - 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
}
boot(data100, fun, R = 999)
fun <- function(vals, n){
#print(dim(vals))
cov_data100 = cov(vals)
#cov_data100
eigenvalues = eigen(cov_data100)$values
ui_lambda_upper = exp(log(eigenvalues)) + 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
ui_lambda_lower = exp(log(eigenvalues)) - 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
return (c(ui_lambda_upper, ui_lambda_lower))
}
boot(data100, fun, R = 999)
boot(data100, fun, R = 9999)
boot(data100, fun, R = 9)
boot(data100, fun, R = 1)
?boot
fun <- function(vals, n){
#print(dim(vals))
print(n)
cov_data100 = cov(vals)
#cov_data100
eigenvalues = eigen(cov_data100)$values
ui_lambda_upper = exp(log(eigenvalues)) + 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
ui_lambda_lower = exp(log(eigenvalues)) - 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
return (c(ui_lambda_upper, ui_lambda_lower))
}
boot(data100, fun, R = 4)
fun <- function(vals, n){
#print(dim(vals))
#print(n)
cov_data100 = cov(vals[n,])
#cov_data100
eigenvalues = eigen(cov_data100)$values
ui_lambda_upper = exp(log(eigenvalues)) + 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
ui_lambda_lower = exp(log(eigenvalues)) - 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
return (c(ui_lambda_upper, ui_lambda_lower))
}
boot(data100, fun, R = 4)
fun <- function(vals, n){
#print(dim(vals))
#print(n)
cov_data100 = cov(vals[n,])
#cov_data100
eigenvalues = eigen(cov_data100)$values
ui_lambda_upper = exp(log(eigenvalues)) + 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
ui_lambda_lower = exp(log(eigenvalues)) - 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
print(c(ui_lambda_upper, ui_lambda_lower))
return (c(ui_lambda_upper, ui_lambda_lower))
}
boot(data100, fun, R = 4)
r = boot(data100, fun, R = 4)
r$t
rowMeans(r$t)
r$t0
colMeans(r$t)
r = boot(data100, fun, R = 40)
colMeans(r$t)
fun <- function(vals, n){
#print(dim(vals))
#print(n)
cov_data100 = cov(vals[n,])
#cov_data100
eigenvalues = eigen(cov_data100)$values
ui_lambda_upper = exp(log(eigenvalues)) + 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
ui_lambda_lower = exp(log(eigenvalues)) - 1.96*sqrt(2/(dim(vals)[1]-1))    #95%
#print(c(ui_lambda_upper, ui_lambda_lower))
return (c(ui_lambda_upper, ui_lambda_lower))
}
r = boot(data100, fun, R = 400)
colMeans(r$t)
r$t0
r = boot(data100, fun, R = 4000)
colMeans(r$t)
r$t0
colMeans(r$t)
r$t0
r = boot(data100, fun, R = 40000)
colMeans(r$t)
r$t0
UI = colMeans(r$t)
print(UI[1], UI[3])
print(UI[2], UI[4])
print(c(UI[1], UI[3]))
print(c(UI[2], UI[4]))
solve(eps)
?cov
data = USArrests
svd(data)
svd = svd(data)
u = svd$u
d = svd$d
v = svd$v
data - u %*% d %*% t(v)
data - u %*% diag(d) %*% v
sum(data - u %*% diag(d) %*% v)
apply(data, mean)
apply(data, 2,mean)
means = apply(data, 2,mean)
u %*% t(u)
t(u) %*% u
v %*% t(v)
svd
sum(data - u %*% diag(d) %*% v)
sum/data
sum/data)
sum(data)
sum(data - u %*% diag(d) %*% v)
sum(abs(data))
sum(data - u %*% diag(d) %*% v)
sum(abs(data - u %*% diag(d) %*% v))
sum(abs(data))
sum(abs(data - u %*% diag(d) %*% v))
sum(abs(data - u %*% diag(d) %*% t(v)))
sum(abs(data))
sum(abs(data - u %*% diag(d) %*% t(v)))
sum(data - u %*% diag(d) %*% t(v))
?inverse
u_test = data %*% v %*% diag(d^(-1))
u_test = as.matrix(data) %*% v %*% diag(d^(-1))
u - ui_test
u - u_test
X = scale(data)
apply(X, 2, sd)
U = svd(X)$u
V = svd(X)$v
D = diag(svd(X)$d)
peacomp = U %*% D
peacomp
pca.out = prcomp(data, scale=TRUE)
pca.out$x[1:5,]
peacomp[1:5,]
pca.out$rotation
XC = scale(data, center = TRUE, scale = FALSe)
XC = scale(data, center = TRUE, scale = FALSE)
V
UC = svd(XC)$u
VC = svd(XC)$v
DC = diag(svd(XC)$d)
peacomp.C = UC %*% DC
peacomp.C$x[1:5,]
peacomp.C
peacomp.C[1:5,]
peacomp.C[1:5,]
pca.out$x[1:5,]
pca.out.C = prcomp(data, scale=FALSE)
peacomp.C[1:5,]
pca.out.C$x[1:5,]
pca.out.C$rotation
X = matrix(c(1, 1, 0, 1, -1, 1), ncol=2)
X
X = matrix(c(1, 0, 1, -1, 1, 1, 1), ncol=2)
X
X = matrix(c(1, 0, -1, 1, 1, 1), ncol=2)
X
svd(X)
svd = svd(X)
svd$d
diag(svd$d)
res = svd$u %*% diag(svd$d) %*% t(svd$v)
res
sqrt(svd$d)
?svd
XX =  matrix(c(1, 2, 3, 2, 1, 4, 3, 4, 1), ncol=4)
XX =  matrix(c(1, 2, 3, 2, 1, 4, 3, 4, 1), ncol=3)
XX
eigen(XX, symmetric = T)
eigen(XX)
eigen(XX%*%XX)
XX =  matrix(c(1, 2, 3, 2, 1, 4, 3, 4, 1), ncol=3)
ss = svd(XX)
ss
Xsq = XX%*%XX
Xsq
XX
XX =  matrix(c(1, 2, 3, 2, 1, 4, 3, 4, 1), ncol=3)
eigen(XX, symmetric = T)
ss = svd(XX)
ss
X = matrix(c(1, 0, -1, 1, 1, 1), ncol=2)
svd = svd(X)
X
XX =  matrix(c(1, 2, 3, 2, 1, 4, 3, 4, 1), ncol=3)
XX
XX =  matrix(c(1, 2, 3, 2, 1, 4, 3, 4, 5), ncol=3)
XX
ss = svd(XX)
ss
XX =  matrix(c(1, 2, 3, 2, 1, 4, 3, 4, 1), ncol=3)
XX
ss = svd(XX)
ss
XX =  matrix(c(1, 2, 3, 2, 1, 4, 3, 4, 5), ncol=3)
XX
ss = svd(XX)
ss
ss$U
ss$u
sum(ss$u)
sum(ss$u^2)
X = matrix(c(1, 0, -1, 1, 1, 1), ncol=2)
svd = svd(X)
diag(svd$d)
diag(svd$d)
diag(svd$d)^2
sqrt(XX)
(XX)^0.5
sqrtm(XX)
library(expm)
install.packages("expm")
library(expm)
sqrtm(XX)
sqrtm(XX)%*%sqrtm(XX)
X %*% t(X)
X = matrix(c(1, 0, -1, 1, 1, 1), ncol=2)
X %*% t(X)
det?
?det
?det
W = X %*% t(X)
det(W)
W
det(W)
X
W = X %*% t(X)
W
solve(diag(svd$d)^2)
W = t(X) %*% X
W
eigen(W)
eigen(W)
eigen(W)
eigen(W)
svd = svd(X)
svd
W
solve(diag(svd$d)^2)
solve(diag(c(3,2,0)))
diag(3,2,0)
diag(c(3,2,0))
solve(diag(c(3,2,0)))
solve(diag(svd$d)^2)
solve(diag(svd$d)^2)
diag(svd$d)
solve(diag(svd$d))
X %*% svd$v %*% solve(diag(svd$d))
?rmultinorm
?rmultinom
install.packages("GenOrd")
library(GenOrd)
set.seed(1)
# Sets the marginals.
# The values are cumulative so for the first variable the first marginal will be .1, the second is .2, the third is .3, and the fourth is .4
marginal < - list(c(0.1,0.3,0.6),c(0.4,0.7,0.9))
# Checks the lower and upper bounds of the correlation coefficients.
corrcheck(marginal)
# Sets the correlation coefficients
R <- matrix(c(1,-0.6,-0.6,1),2,2) # Correlation matrix
n <- 100
m <- ordsample(n, marginal, R)
##compare it with the pre-defined R
cor(m)
table(m[,1],m[,2])
chisq.test(m)
gbar < - tapply(m[,1], list(m[,1], m[,2]), length)
par(mfrow=c(1,1))
barplot(gbar, beside=T, col=cm.colors(4), main="Example Bar Chart of Counts by Group",xlab="Group",ylab="Frequency")
##Selects and ordinal sample with given correlation R and given marginals.
gbar < - tapply(m[,1], list(m[,1], m[,2]), length)
gbar < - tapply(m[,1], list(m[,1], m[,2]), length)
m
set.seed(1)
marginal < - list(c(0.1,0.3,0.6),c(0.4,0.7,0.9))
corrcheck(marginal)
library(GenOrd)
set.seed(1)
marginal < - list(c(0.1,0.3,0.6),c(0.4,0.7,0.9))
marginal <- list(c(0.1,0.3,0.6),c(0.4,0.7,0.9))
ordsample
corrcheck(marginal)
R <- matrix(c(1,-0.6,-0.6,1),2,2) # Correlation matrix
n <- 100
m <- ordsample(n, marginal, R)
cor(m)
table(m[,1],m[,2])
m
table(m[,1],m[,2])
chisq.test(m)
gbar < - tapply(m[,1], list(m[,1], m[,2]), length)
chisq.test(m)
gbar < - tapply(m[,1], list(m[,1], m[,2]), length)
gbar <- tapply(m[,1], list(m[,1], m[,2]), length)
par(mfrow=c(1,1))
barplot(gbar, beside=T, col=cm.colors(4), main="Example Bar Chart of Counts by Group",xlab="Group",ylab="Frequency")
var(c(1,2,345,6))
?var
l = matrix(c(12,35,35,45,62,52,1), ncol=3)
l = matrix(c(12,35,35,45,62,52,1,5), ncol=3)
l = matrix(c(12,35,35,45,62,52,1,5), ncol=2)
l
var(l)
rank(c(2,3,4))
?rank
var(c(6))
var(c(6,3))
var(c(6,3,3))
cov(c(1,2,3), c(4,5,6))
cov(c(1,2,3), c(4,5,1))
cor(c(1,2,3), c(4,5,1))
cor(3*c(1,2,3), c(4,5,1))
cor(3*c(1,2,3), 44*c(4,5,1))
?svd
l = matrix(c(12,35,35,45,62,52,1,5), ncol=1)
re = svd(l)
re
setwd("c://Users/Tamme/Desktop/Yli/Magistritöö/Coding/LDA/")
library(R.matlab)
library("SomaticSignatures")
library(ggplot2)
load(file = "mutationTypes.rda") #variabe mutationTypes
load(file = "dataMmRownamesRightOrder.rda")
source("plot_functions.R")
setwd("c://Users/Tamme/Desktop/Yli/Magistritöö/Coding/")
source("plot_functions.R")
rawData=readMat("LDA/data/synthetic_5sigs_96mut_500samples_2000tot_2000samp.mat")
names(rawData)
dataOrig = rawData$originalGenomes
rownames(dataOrig) = mutationTypes
sig=5
dataW <- read.table(paste0("LDA/lda-c/20synthetic_rs_", sig, "sigs_full_moreconv_2/final.beta.prob.txt"), header=FALSE,sep=" ")
setwd("c://Users/Tamme/Desktop/Yli/Magistritöö/github/mutationalsignaturesNCSUT/")
load(file = "mutationTypes.rda") #variabe mutationTypes
load(file = "dataMmRownamesRightOrder.rda")
rawData=readMat("LDA/data/synthetic_5sigs_96mut_500samples_2000tot_2000samp.mat")
dataOrig = rawData$originalGenomes
rownames(dataOrig) = mutationTypes
dataW <- read.table(paste0("LDA/lda-c/20synthetic_rs_", sig, "sigs_full_moreconv_2/final.beta.prob.txt"), header=FALSE,sep=" ")
dataW <- read.table(paste0("LDA/lda-c/20synthetic_rs_", sig, "sigs_full_moreconv/final.beta.prob.txt"), header=FALSE,sep=" ")
dataH <- read.table(paste0("LDA/lda-c/20synthetic_rs_", sig, "sigs_full_moreconv/final.gamma"), header=FALSE,sep=" ")
H = as.matrix(t(dataH))
dataW = dataW[,-1]
dataW = t(dataW)
dataW <- read.table(paste0("LDA/lda-c/20synthetic_rs_", sig, "sigs_full_moreconv/final.beta.prob.txt"), header=FALSE,sep=" ")
dataW = dataW[,-1]
W = t(dataW)
R = W %*% H
diff = R - dataOrig
frobenius = sqrt(sum(diag(t(diff) %*% diff)))
print(frobenius)
rownames(W) = mutationTypes
data = W
rowSums(data)
data = t(t(data) / rowSums(t(data)))
plot = plotMutationalSignatures(data, 0.25)
plot
source("plot_functions.R")
source("plot_functions.R")
data = W
plot = plotMutationalSignatures(data, 0.25)
plot
setwd("c://Users/Tamme/Desktop/Yli/Magistritöö/github/mutationalsignaturesNCSUT/")
library("SomaticSignatures")
library(ggplot2)
load(file = "mutationTypes.rda") #variabe mutationTypes
load(file = "dataMmRownamesRightOrder.rda")
rawData = readMat("LDA/data/21_genomes_96_subs_data.mat")
dataOrig = rawData$originalGenomes
rownames(dataOrig) = dataMmRownamesRightOrder
dataOrig = dataOrig[mutationTypes,]
View(dataOrig)
View(dataOrig)
dataOrig2 =  matrix(unlist(rawData[1]), ncol = 21, byrow = FALSE)
View(dataOrig2)
rownames(dataOrig2) = dataMmRownamesRightOrder
dataOrig2 = dataOrig2[mutationTypes,]
sig=5
dataW <- read.table(paste0("LDA/lda-c/506breast_rs_", sig, "sigs_full_moreconv/final.beta.prob.txt"), header=FALSE,sep=" ")
dataW <- read.table(paste0("LDA/lda-c/21breast_rs_", sig, "sigs_full_moreconv/final.beta.prob.txt"), header=FALSE,sep=" ")
dataH <- read.table(paste0("LDA/lda-c/21breast_rs_", sig, "sigs_full_moreconv/final.gamma"), header=FALSE,sep=" ")
sig=4
dataW <- read.table(paste0("LDA/lda-c/21breast_rs_", sig, "sigs_full_moreconv/final.beta.prob.txt"), header=FALSE,sep=" ")
dataH <- read.table(paste0("LDA/lda-c/21breast_rs_", sig, "sigs_full_moreconv/final.gamma"), header=FALSE,sep=" ")
H = as.matrix(t(dataH))
dataW = dataW[,-1]
W = t(dataW)
R = W %*% H
diff = R - dataOrig
frobenius = sqrt(sum(diag(t(diff) %*% diff)))
print(frobenius)
result[1, sig] = frobenius
rownames(W) = mutationTypes
data = W
plot = plotMutationalSignatures(data, 0.25)
plot
plot = plotMutationalSignatures(data, 0.3)
plot
setwd("C://Users/Tamme/Desktop/Yli/Magistritöö/github/mutationalsignaturesNCSUT/")
library("SomaticSignatures")
library(ggplot2)
library(R.matlab)
library(lsa)
load(file = "mutationTypes.rda") #variabe mutationTypes
load(file = "dataMmRownamesRightOrder.rda")
rawData = readMat("119_Breast_genomes_mutational_catalog_96_subs.mat")
rawData = readMat("RFN/data/119_genomes_96_subs_data.mat")
rawData$originalGenomes
dataOrig = rawData$originalGenomes
sig = 5
nrOfSamples = 119
raw_data = readMat(paste0("RFN/models/", nrOfSamples, "_breast_C_L1_0_", sig, "_100_out.mat"))
W= raw_data$W
H= raw_data$H
R =raw_data$R
diff = dataOrig - W %*% H
frobenius = sqrt(sum(diag(t(diff) %*% diff)))
print(frobenius)
data = W
rownames(data) = dataMmRownamesRightOrder
data = data[mutationTypes,]
source("plot_functions.R")
data = W
rownames(data) = dataMmRownamesRightOrder
data = data[mutationTypes,]
plot = plotMutationalSignatures(data, 0.25)
plot
nrOfRealMutations = 2000
rawData = readMat(paste0("data/synthetic_5sigs_96mut_2000tot_", nrOfRealMutations, "samp.mat"))
rawData = readMat(paste0("RFN/data/synthetic_5sigs_96mut_2000tot_", nrOfRealMutations, "samp.mat"))
dataOrigW =  rawData$sampledW
dataOrig = rawData$originalGenomes
sig = 4
raw_data = readMat(paste0("models/2synthetic_", nrOfRealMutations, "_C_L1_0_", sig, "_100_out.mat"))
raw_data = readMat(paste0("RFN/models/2synthetic_", nrOfRealMutations, "_C_L1_0_", sig, "_100_out.mat"))
raw_data = readMat(paste0("RFN/models/synthetic_", nrOfRealMutations, "_C_L1_0_", sig, "_100_out.mat"))
sig = 5
raw_data = readMat(paste0("RFN/models/synthetic_", nrOfRealMutations, "_C_L1_0_", sig, "_100_out.mat"))
W= raw_data$W
H= raw_data$H
R =raw_data$R
diff = dataOrig - W %*% H
diff=t(dataOrigW - data)
frobenius = sqrt(sum(diag(t(diff) %*% diff)))
print(frobenius)
sum(data)
print(frobenius)
data = t(t(data)/colSums(data))
data = W
rownames(data) = mutationTypes
data = W
rownames(data) = mutationTypes
plot = plotMutationalSignatures(data, 0.25)
plot
library(reshape2)
library(RColorBrewer)
h = matrix(unlist(H), ncol = dim(H)[2], byrow = FALSE)
H = t(H)
H / row
normalizedH = H/rowSums(H)
rowSums(normalizedH)
mydf2 = as.data.frame(normalizedH)
mydf2$Samples = row.names(mydf2)
mydf2.molten <- melt(mydf2, value.name="Identity", variable.name="Signature")
colourCount = dim(H)[2]
getPalette = colorRampPalette(brewer.pal(5, "Set3"))
p = ggplot( data=mydf2.molten, aes(x = Samples, y = Identity, fill=Signature))
p +  geom_bar(stat = "identity") + scale_fill_manual(values = getPalette(colourCount)) + ggtitle(paste0("RFN C impl ", dim(normalizedH)[2], " signatures proportions H"))
p = ggplot( data=mydf2.molten, aes(x = Samples, y = value, fill=variable))
p +  geom_bar(stat = "identity") + scale_fill_manual(values = getPalette(colourCount)) + ggtitle(paste0("RFN C impl ", dim(normalizedH)[2], " signatures proportions H"))
